AWSTemplateFormatVersion: 2010-09-09

Parameters:
  ProjectName:
    Type: String
    Description: Project name that will be used to name and identify resoures that are created
  GitBranch:
    Type: String
    Description: Git branch that will be used
    Default: master

Resources:

  # Creates a bucket to store code used to deploy to Lambda
  CodePipelineBucket:
    Type: AWS::S3::Bucket

  # Creates a CodeCommit repo to store code for the project. Updates to the files will trigger the CodePipeline to run
  CodeCommitRepo:
    Type: "AWS::CodeCommit::Repository"
    Properties: 
      RepositoryDescription: CodeCommit Demo
      RepositoryName: !Ref ProjectName

  # Creates a IAM role that will be assumed by CloudFormation when invoked by CodePipeline to create the infrastructure
  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: cloudformation.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Path: /
      RoleName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-Cloudformation-Role' ] ]

  CloudFormationPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join [ '', [ !Ref ProjectName, '-Cloudformation-Policy' ] ]
      PolicyDocument:
        Statement:
        - Action:
          - lambda:ListTags
          - lambda:TagResource
          - lamdba:UntagResource
          Resource: "*"
          Effect: Allow
      Roles:
        - 
          Ref: "CloudFormationRole"

  # Creates an IAM role for CodePipeline
  CodepipelineServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      RoleName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-Service-Role' ] ]

  # CodePipeline service policy attached to the CodePipeline service role
  CodepipelineRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-Service-Policy' ] ]
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetObject
          - s3:GetObjectVersion
          - s3:GetBucketVersioning
          Resource: "*"
          Effect: Allow
        - Action:
          - s3:PutObject
          Resource:
          - arn:aws:s3:::codepipeline*
          - arn:aws:s3:::elasticbeanstalk*
          Effect: Allow
        - Action:
          - codecommit:CancelUploadArchive
          - codecommit:GetBranch
          - codecommit:GetCommit
          - codecommit:GetUploadArchiveStatus
          - codecommit:UploadArchive
          Resource: "*"
          Effect: Allow
        - Action:
          - codedeploy:CreateDeployment
          - codedeploy:GetApplicationRevision
          - codedeploy:GetDeployment
          - codedeploy:GetDeploymentConfig
          - codedeploy:RegisterApplicationRevision
          Resource: "*"
          Effect: Allow
        - Action:
          - elasticbeanstalk:*
          - ec2:*
          - elasticloadbalancing:*
          - autoscaling:*
          - cloudwatch:*
          - s3:*
          - sns:*
          - cloudformation:*
          - rds:*
          - sqs:*
          - es:*
          - ecs:*
          - iam:PassRole
          Resource: "*"
          Effect: Allow
        - Action:
          - lambda:InvokeFunction
          - lambda:ListFunctions
          Resource: "*"
          Effect: Allow
        - Action:
          - opsworks:CreateDeployment
          - opsworks:DescribeApps
          - opsworks:DescribeCommands
          - opsworks:DescribeDeployments
          - opsworks:DescribeInstances
          - opsworks:DescribeStacks
          - opsworks:UpdateApp
          - opsworks:UpdateStack
          Resource: "*"
          Effect: Allow
        - Action:
          - cloudformation:CreateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeStacks
          - cloudformation:UpdateStack
          - cloudformation:CreateChangeSet
          - cloudformation:DeleteChangeSet
          - cloudformation:DescribeChangeSet
          - cloudformation:ExecuteChangeSet
          - cloudformation:SetStackPolicy
          - cloudformation:ValidateTemplate
          - iam:PassRole
          Resource: "*"
          Effect: Allow
        - Action:
          - codebuild:BatchGetBuilds
          - codebuild:StartBuild
          Resource: "*"
          Effect: Allow
        Version: '2012-10-17'
      Roles: 
        - 
          Ref: "CodepipelineServiceRole"

  # CloudFormation policy attached to the CloudFormation role assumed when creating the infrastructure
  CloudFormationRolePolicies: 
    Type: "AWS::IAM::Policy"
    Properties: 
      PolicyName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-Cloudformation-Policy' ] ]
      PolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
            - arn:aws:s3:::codepipeline*
            Effect: Allow
          - Action:
            - lambda:*
            Resource:
            - !Join [ '', [ 'arn:aws:lambda:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':function:*' ] ]
            Effect: Allow
          - Action:
            - apigateway:*
            Resource:
            - !Join [ '', [ 'arn:aws:apigateway:', !Ref "AWS::Region", '::*' ] ]
            Effect: Allow
          - Action:
            - iam:GetRole
            - iam:CreateRole
            - iam:DeleteRole
            - iam:PutRolePolicy
            Resource:
            - !Join [ '', [ 'arn:aws:iam::', !Ref "AWS::AccountId", ':role/*' ] ]
            Effect: Allow
          - Action:
            - iam:AttachRolePolicy
            - iam:DeleteRolePolicy
            - iam:DetachRolePolicy
            Resource:
            - !Join [ '', [ 'arn:aws:iam::', !Ref "AWS::AccountId", ':role/*' ] ]
            Effect: Allow
          - Action:
            - iam:PassRole
            Resource:
            - "*"
            Effect: Allow
          - Action:
            - cloudformation:CreateChangeSet
            Resource:
            - !Join [ '', [ 'arn:aws:cloudformation:', !Ref "AWS::Region", ':aws:transform/Serverless-2016-10-31' ] ]
            Effect: Allow
          - Action:
            - codedeploy:CreateApplication
            - codedeploy:DeleteApplication
            - codedeploy:RegisterApplicationRevision
            Resource:
            - !Join [ '', [ 'arn:aws:codedeploy:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':application:*' ] ]
            Effect: Allow
          - Action:
            - codedeploy:CreateDeploymentGroup
            - codedeploy:CreateDeployment
            - codedeploy:GetDeployment
            Resource:
            - !Join [ '', [ 'arn:aws:codedeploy:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':deploymentgroup:*' ] ]
            Effect: Allow
          - Action:
            - codedeploy:GetDeploymentConfig
            Resource:
            - !Join [ '', [ 'arn:aws:codedeploy:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':deploymentconfig:*' ] ]
            Effect: Allow
      Roles: 
        - 
          Ref: "CloudFormationRole"

  # Creates a role for code build
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-CodeBuild-Role' ] ]
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                - 'logs:*'
                - 'ec2:CreateNetworkInterface'
                - 'ec2:DescribeNetworkInterfaces'
                - 'ec2:DeleteNetworkInterface'
                - 'ec2:DescribeSubnets'
                - 'ec2:DescribeSecurityGroups'
                - 'ec2:DescribeDhcpOptions'
                - 'ec2:DescribeVpcs'
                - 'ec2:CreateNetworkInterfacePermission'
                - cloudformation:CreateStack
                - cloudformation:DeleteStack
                - cloudformation:DescribeStacks
                - cloudformation:UpdateStack
                - cloudformation:CreateChangeSet
                - cloudformation:DeleteChangeSet
                - cloudformation:DescribeChangeSet
                - cloudformation:ExecuteChangeSet
                - cloudformation:SetStackPolicy
                - cloudformation:ValidateTemplate
                - iam:*
                - lambda:*
                Effect: Allow
                Resource: '*'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:3.6.5
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  CloudWatchEventRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '', [ !Ref ProjectName, '-Codepipeline-CloudWatchEvent-Role' ] ]
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [events.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - codepipeline:StartPipelineExecution
              Resource:
                - !Join [ '', [ 'arn:aws:codepipeline:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':', !Ref CodePipeline ] ]

          
  CodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join [ '', [ !Ref ProjectName, '-Codepipeline-Demo' ] ]
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodepipelineServiceRole.Arn
      ArtifactStore: 
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - 
          Name: Source
          Actions: 
            - 
              Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              Configuration: 
                BranchName: !Ref GitBranch
                PollForSourceChanges: 'false'
                RepositoryName: !Ref ProjectName
              OutputArtifacts: 
                - 
                  Name: MyApp
              RunOrder: 1
        - 
          Name: Build
          Actions: 
            - 
              Name: CodeBuild
              InputArtifacts: 
                - 
                  Name: MyApp
              Configuration: 
                ProjectName: !Ref CodeBuildProject
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts: 
                - 
                  Name: MyAppBuild
              RunOrder: 1
        - 
          Name: Staging
          Actions:
            - 
              Name: !Ref ProjectName
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              InputArtifacts:
                - 
                  Name: MyAppBuild
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                Capabilities: CAPABILITY_NAMED_IAM
                ChangeSetName: !Join [ '', [ !Ref ProjectName, '-changeset' ] ]
                #                ParameterOverrides: { "Environment": "cmk"}
                RoleArn: !GetAtt CloudFormationRole.Arn
                StackName: !Ref ProjectName
                TemplatePath: MyAppBuild::outputSamTemplate.yaml
              OutputArtifacts: []
              RunOrder: 1
        - 
          Name: Execture-change-set
          Actions:
            - 
              Name: !Join [ '', [ !Ref ProjectName, '-changeset' ] ]
              InputArtifacts: []
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: !Join [ '', [ !Ref ProjectName, '-changeset' ] ]
                StackName: !Ref ProjectName
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              OutputArtifacts: []
              RunOrder: 1

  EventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "EventRule for codepipeline"
      EventPattern: 
        source:
        - aws.codecommit
        detail-type:
        - CodeCommit Repository State Change
        resources:
        - !GetAtt CodeCommitRepo.Arn
        detail:
          event:
          - referenceCreated
          - referenceUpdated
          referenceType:
          - branch
          referenceName:
          - !Ref GitBranch
      State: "ENABLED"
      Targets: 
        - Arn: !Join [ '', [ 'arn:aws:codepipeline:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':', !Ref CodePipeline ] ]
          Id: "TargetFunctionV1"
          RoleArn: !GetAtt CloudWatchEventRole.Arn

  EventRule: 
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "EventRule for codepipeline"
      EventPattern: 
        source:
        - aws.codecommit
        detail-type:
        - CodeCommit Repository State Change
        resources:
        - !GetAtt CodeCommitRepo.Arn
        detail:
          event:
          - referenceCreated
          - referenceUpdated
          referenceType:
          - branch
          referenceName:
          - !Ref GitBranch
      State: "ENABLED"
      Targets: 
        - Arn: !Join [ '', [ 'arn:aws:codepipeline:', !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ':', !Ref CodePipeline ] ]
          Id: "TargetFunctionV1"
          RoleArn: !GetAtt CloudWatchEventRole.Arn

Outputs:
  CodeDeployBucketForLambdaDeployments:
    Description: The bucket used to hold lambda functions for deployments
    Value: !Ref CodePipelineBucket

